from fastapi import FastAPI, HTTPException, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
from pydantic import BaseModel
from uuid import uuid4
from random import random
from db import database, metadata, engine
import asyncio
import logging

from sqlalchemy.dialects.postgresql import insert as pg_insert

from models import users, games, safe_sessions  
from random import randint

# ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI()

# ‚úÖ CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["https://telegram-mini-app-two-lake.vercel.app"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
@app.on_event("startup")
async def startup():
    await database.connect()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()

# ‚úÖ Pydantic –º–æ–¥–µ–ª–∏
class UserCreate(BaseModel):
    id: int
    username: str

class BalanceUpdate(BaseModel):
    id: int
    currency: str
    amount: float

class GameRecord(BaseModel):
    user_id: int
    game: str
    bet: float
    result: str  # "pending", "win", "lose"
    win: bool
    currency: str
    prize_amount: float = 0.0
    final: bool = False  # üëà –¥–æ–±–∞–≤–∏–ª–∏

class BalanceSubscribe(BaseModel):
    user_id: int
    current_ton: float
    current_usdt: float

class UserIdOnly(BaseModel):
    id: int

class SafeStart(BaseModel):
    user_id: int
    currency: str
    bet: float

class SafeGuess(BaseModel):
    session_id: str
    user_id: int
    guess: list[int]

class SafeHint(BaseModel):
    session_id: str
    user_id: int

class CoinStart(BaseModel):
    user_id: int
    username: str
    currency: str  # "ton" –∏–ª–∏ "usdt"
    bet: float
    choice: str     # "heads" –∏–ª–∏ "tails"

class BoxesRequest(BaseModel):
    user_id: int
    username: str
    currency: str
    bet: float
    choice: int  # üëà –¥–æ–±–∞–≤–ª–µ–Ω –≤—ã–±–æ—Ä –∫–æ—Ä–æ–±–∫–∏ –∏–≥—Ä–æ–∫–æ–º (1, 2 –∏–ª–∏ 3)


# üß† –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –ø–∞–º—è—Ç–∏
user_balances_cache = {}

# ‚úÖ –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã (–µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
metadata.create_all(engine)

# ‚úÖ –†–æ—É—Ç—ã
@app.get("/")
async def root():
    return {"status": "Backend —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ PostgreSQL!"}

@app.post("/init")
async def init_user(user: UserCreate):
    stmt = pg_insert(users).values(
        id=user.id,
        username=user.username,
        ton_balance=0.0,
        usdt_balance=0.0
    ).on_conflict_do_nothing(index_elements=["id"])
    await database.execute(stmt)

    row = await database.fetch_one(users.select().where(users.c.id == user.id))
    if not row:
        raise HTTPException(status_code=500, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return {"ton": row["ton_balance"], "usdt": row["usdt_balance"]}

@app.post("/balance/add")
async def update_balance(update: BalanceUpdate):
    if update.currency not in ["ton", "usdt"]:
        raise HTTPException(status_code=400, detail="Invalid currency")
    col = users.c.ton_balance if update.currency == "ton" else users.c.usdt_balance
    query = users.update().where(users.c.id == update.id).values({col: col + update.amount})
    await database.execute(query)

    # üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    row = await database.fetch_one(users.select().where(users.c.id == update.id))
    user_balances_cache[str(update.id)] = {"ton": row["ton_balance"], "usdt": row["usdt_balance"]}

    return {"status": "updated"}

@app.post("/game")
async def record_game(game: GameRecord):
    currency = game.currency.lower()
    if currency not in ["ton", "usdt"]:
        raise HTTPException(status_code=400, detail="Invalid currency")

    balance_col = users.c.ton_balance if currency == "ton" else users.c.usdt_balance

    if not game.final:
        query = (
            users.update()
            .where(users.c.id == game.user_id)
            .where(balance_col >= game.bet)
            .values({balance_col: balance_col - game.bet})
            .returning(balance_col)
        )
        updated = await database.fetch_one(query)
        if not updated:
            raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    else:
        if game.win and game.prize_amount > 0:
            await database.execute(
                users.update()
                .where(users.c.id == game.user_id)
                .values({balance_col: balance_col + game.prize_amount})
            )

    # üßæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
    game_id = str(uuid4())
    await database.execute(
        games.insert().values(
            id=game_id,
            user_id=game.user_id,
            game=game.game,
            bet=game.bet,
            result=game.result,
            win=game.win
        )
    )

    # üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    row = await database.fetch_one(users.select().where(users.c.id == game.user_id))
    user_balances_cache[str(game.user_id)] = {"ton": row["ton_balance"], "usdt": row["usdt_balance"]}

    return await get_balance(game.user_id)

@app.post("/balance/prize")
async def add_prize(update: BalanceUpdate):
    if update.currency not in ["ton", "usdt"]:
        raise HTTPException(status_code=400, detail="Invalid currency")

    col = users.c.ton_balance if update.currency == "ton" else users.c.usdt_balance

    query = users.update().where(users.c.id == update.id).values({col: col + update.amount}).returning(col)
    result = await database.fetch_one(query)

    # üíæ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    row = await database.fetch_one(users.select().where(users.c.id == update.id))
    user_balances_cache[str(update.id)] = {"ton": row["ton_balance"], "usdt": row["usdt_balance"]}

    return {"status": "prize_added", "new_balance": result[0]}

@app.get("/games/{user_id}")
async def get_games(user_id: int):
    query = games.select().where(games.c.user_id == user_id).order_by(games.c.timestamp.desc())
    rows = await database.fetch_all(query)
    return [dict(row) for row in rows]

@app.get("/balance/{user_id}")
async def get_balance(user_id: int):
    row = await database.fetch_one(users.select().where(users.c.id == user_id))
    if not row:
        raise HTTPException(status_code=404, detail="User not found")
    return {"ton": row["ton_balance"], "usdt": row["usdt_balance"]}

# ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ–¥–∏–Ω —Ä–∞–∑ (–≤ –Ω–∞—á–∞–ª–µ backend)
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

@app.post("/balance/subscribe")
async def subscribe_balance(data: BalanceSubscribe):
    user_id = data.user_id
    client_ton = round(data.current_ton, 2)
    client_usdt = round(data.current_usdt, 2)

    logging.info(f"üì° –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç user_id={user_id} | client TON={client_ton}, USDT={client_usdt}")

    for _ in range(30):
        await asyncio.sleep(0.1)

        row = await database.fetch_one(users.select().where(users.c.id == user_id))
        if row:
            ton = round(float(row["ton_balance"]), 2)
            usdt = round(float(row["usdt_balance"]), 2)

            if ton != client_ton or usdt != client_usdt:
                logging.info(f"üîÑ –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏–ª—Å—è —É user_id={user_id} ‚Üí TON={ton}, USDT={usdt}")
                return {
                    "update": True,
                    "ton": ton,
                    "usdt": usdt
                }

    logging.info(f"‚è± –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ 60 —Å–µ–∫ —É user_id={user_id}")
    return {"update": False}




@app.post("/balance/force")
async def force_balance(user: UserIdOnly):
    row = await database.fetch_one(users.select().where(users.c.id == user.id))
    if not row:
        raise HTTPException(status_code=404, detail="User not found")
    return {
        "ton": float(row["ton_balance"]),
        "usdt": float(row["usdt_balance"])
    }

@app.post("/safe/start")
async def start_safe_game(data: SafeStart):
    currency = data.currency.lower()
    if currency not in ["ton", "usdt"]:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞")

    balance_col = users.c.ton_balance if currency == "ton" else users.c.usdt_balance

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    user = await database.fetch_one(users.select().where(users.c.id == data.user_id))
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    current_balance = float(user[balance_col.name])
    if current_balance < data.bet:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

    # ‚ùå –£–¥–∞–ª–µ–Ω–æ: —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∑–¥–µ—Å—å

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    code = [randint(0, 9) for _ in range(3)]
    session_id = str(uuid4())

    await database.execute(
        safe_sessions.insert().values(
            id=session_id,
            user_id=data.user_id,
            currency=currency,
            bet=data.bet,
            code=code,
            attempts=0,
            used_hint=False,
            is_finished=False
        )
    )

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à (–±–∞–ª–∞–Ω—Å –Ω–µ –º–µ–Ω—è–ª—Å—è, –Ω–æ –ø—É—Å—Ç—å –±—É–¥–µ—Ç)
    row = await database.fetch_one(users.select().where(users.c.id == data.user_id))
    user_balances_cache[str(data.user_id)] = {"ton": row["ton_balance"], "usdt": row["usdt_balance"]}

    # –ó–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É games
    await database.execute(
        games.insert().values(
            id=session_id,
            user_id=data.user_id,
            game="Safe Cracker",
            bet=data.bet,
            result="pending",
            win=False
        )
    )

    return {
        "success": True,
        "session_id": session_id
    }


@app.post("/safe/guess")
async def safe_guess(data: SafeGuess):
    session = await database.fetch_one(safe_sessions.select().where(safe_sessions.c.id == data.session_id))
    if not session:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if session["is_finished"]:
        raise HTTPException(status_code=400, detail="–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    if session["user_id"] != data.user_id:
        raise HTTPException(status_code=403, detail="–°–µ—Å—Å–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    if not isinstance(data.guess, list) or len(data.guess) != 3 or not all(isinstance(d, int) for d in data.guess):
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞")

    correct_code = session["code"]
    attempts = session["attempts"]
    bet = session["bet"]
    currency = session["currency"]

    if attempts >= 3:
        raise HTTPException(status_code=400, detail="–ü–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å")

    is_win = data.guess == correct_code
    updated_attempts = attempts + 1

    if is_win:
        prize = bet * 10
        balance_col = users.c.ton_balance if currency == "ton" else users.c.usdt_balance

        await database.execute(
            users.update()
            .where(users.c.id == data.user_id)
            .values({balance_col: balance_col + prize})
        )

        await database.execute(
            games.update()
            .where(games.c.id == data.session_id)
            .values(result="win", win=True)
        )

        await database.execute(
            safe_sessions.update()
            .where(safe_sessions.c.id == data.session_id)
            .values(attempts=updated_attempts, is_finished=True)
        )

        # üß† –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        row = await database.fetch_one(users.select().where(users.c.id == data.user_id))
        user_balances_cache[str(data.user_id)] = {"ton": row["ton_balance"], "usdt": row["usdt_balance"]}

        logging.info(f"üéâ –ü–æ–±–µ–¥–∞! user_id={data.user_id} –≤—ã–∏–≥—Ä–∞–ª {prize} {currency.upper()}")

        return {
            "result": "win",
            "prize": prize,
            "code": correct_code
        }

    elif updated_attempts >= 3:
        await database.execute(
            games.update()
            .where(games.c.id == data.session_id)
            .values(result="lose", win=False)
        )
        await database.execute(
            safe_sessions.update()
            .where(safe_sessions.c.id == data.session_id)
            .values(attempts=updated_attempts, is_finished=True)
        )

        logging.info(f"‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à. user_id={data.user_id}, –∫–æ–¥ –±—ã–ª: {correct_code}")

        return {
            "result": "lose",
            "code": correct_code
        }

    else:
        await database.execute(
            safe_sessions.update()
            .where(safe_sessions.c.id == data.session_id)
            .values(attempts=updated_attempts)
        )

        logging.info(f"‚ûñ –ü–æ–ø—ã—Ç–∫–∞ {updated_attempts} –æ—Ç user_id={data.user_id}")

        return {
            "result": "try_again",
            "attempts_left": 3 - updated_attempts
        }

@app.post("/safe/hint")
async def safe_hint(data: SafeHint):
    session = await database.fetch_one(safe_sessions.select().where(safe_sessions.c.id == data.session_id))
    if not session:
        raise HTTPException(status_code=404, detail="–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    if session["is_finished"]:
        raise HTTPException(status_code=400, detail="–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    if session["used_hint"]:
        raise HTTPException(status_code=400, detail="–ü–æ–¥—Å–∫–∞–∑–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞")

    if session["user_id"] != data.user_id:
        raise HTTPException(status_code=403, detail="–°–µ—Å—Å–∏—è –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")

    currency = session["currency"]
    hint_cost = 1.0

    balance_col = users.c.ton_balance if currency == "ton" else users.c.usdt_balance

    user_row = await database.fetch_one(users.select().where(users.c.id == data.user_id))
    if not user_row:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")

    current_balance = user_row[balance_col.name]
    if current_balance < hint_cost:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–∫–∏")

    await database.execute(
        users.update()
        .where(users.c.id == data.user_id)
        .values({balance_col: balance_col - hint_cost})
    )

    await database.execute(
        safe_sessions.update()
        .where(safe_sessions.c.id == data.session_id)
        .values(used_hint=True)
    )

    # üß† –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    row = await database.fetch_one(users.select().where(users.c.id == data.user_id))
    user_balances_cache[str(data.user_id)] = {"ton": row["ton_balance"], "usdt": row["usdt_balance"]}

    correct_code = session["code"]
    hint_digit = correct_code[0]

    logging.info(f"üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–ª—è user_id={data.user_id}: {hint_digit}")

    return {
        "hint": hint_digit,
        "cost": hint_cost
    }







@app.post("/coin/start")
async def coin_start(data: CoinStart):
    if data.choice not in ["heads", "tails"]:
        raise HTTPException(status_code=400, detail="–°—Ç–æ—Ä–æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ 'heads' –∏–ª–∏ 'tails'")

    currency = data.currency.lower()
    if currency not in ["ton", "usdt"]:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞")

    balance_col = users.c.ton_balance if currency == "ton" else users.c.usdt_balance

    # üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å–∞
    row = await database.fetch_one(users.select().where(users.c.id == data.user_id))
    if not row:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if row[balance_col.name] < data.bet:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

    # üí≥ –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    await database.execute(
        users.update()
        .where(users.c.id == data.user_id)
        .values({balance_col: balance_col - data.bet})
    )

    # üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã ‚Äî 2 –∏–∑ 12 (‚âà16.7%)
    is_win = random() < (2 / 12)
    result = data.choice if is_win else ("tails" if data.choice == "heads" else "heads")
    prize = round(data.bet * 2, 2) if is_win else 0.0

    # üí∞ –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª ‚Äî –Ω–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑
    if is_win:
        await database.execute(
            users.update()
            .where(users.c.id == data.user_id)
            .values({balance_col: balance_col + prize})
        )

    # üßæ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–≥—Ä—É
    await database.execute(
        games.insert().values(
            id=str(uuid4()),
            user_id=data.user_id,
            game="Coin",
            bet=data.bet,
            result="win" if is_win else "lose",
            win=is_win
        )
    )

    # üîÅ –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
    new_row = await database.fetch_one(users.select().where(users.c.id == data.user_id))
    user_balances_cache[str(data.user_id)] = {
        "ton": new_row["ton_balance"],
        "usdt": new_row["usdt_balance"]
    }

    return {
        "result": result,   # "heads" / "tails"
        "win": is_win,
        "prize": prize
    }





@app.post("/boxes/start")
async def boxes_start(data: BoxesRequest):
    currency = data.currency.lower()
    if currency not in ["ton", "usdt"]:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞")

    balance_col = users.c.ton_balance if currency == "ton" else users.c.usdt_balance

    row = await database.fetch_one(users.select().where(users.c.id == data.user_id))
    if not row:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if row[balance_col.name] < data.bet:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

    # üßæ –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
    await database.execute(
        users.update()
        .where(users.c.id == data.user_id)
        .values({balance_col: balance_col - data.bet})
    )

    # üéØ –õ–æ–≥–∏–∫–∞ –ø–æ–±–µ–¥—ã
    chosen_box = data.choice
    force_win = random.random() < 0.2  # 20%
    regular_win = random.random() < 0.01  # 1%
    is_win = force_win or regular_win

    if is_win:
        winning_box = chosen_box
    else:
        other_boxes = [b for b in [1, 2, 3] if b != chosen_box]
        winning_box = random.choice(other_boxes)

    prize = round(data.bet * 2, 2) if is_win else 0.0

    if is_win:
        await database.execute(
            users.update()
            .where(users.c.id == data.user_id)
            .values({balance_col: balance_col + prize})
        )

    # üìù –ó–∞–ø–∏—Å—å –∏–≥—Ä—ã
    await database.execute(
        games.insert().values(
            id=str(uuid4()),
            user_id=data.user_id,
            game="Boxes",
            bet=data.bet,
            result=f"–í—ã–±—Ä–∞–ª {chosen_box}, –ø—Ä–∏–∑ –≤ {winning_box}",
            win=is_win
        )
    )

    # üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–µ—à–∞
    new_row = await database.fetch_one(users.select().where(users.c.id == data.user_id))
    user_balances_cache[str(data.user_id)] = {
        "ton": new_row["ton_balance"],
        "usdt": new_row["usdt_balance"]
    }

    return {
        "win": is_win,
        "prize": prize,
        "chosenBox": chosen_box,
        "winningBox": winning_box
    }



























@app.get("/health")
async def health_check():
    try:
        if not database.is_connected:
            await database.connect()
        return {"status": "ok"}
    except Exception as e:
        return {"status": "error", "detail": str(e)}

